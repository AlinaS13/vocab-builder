{"version":3,"file":"static/js/306.90dff151.chunk.js","mappings":"kMACA,EAAqC,0C,0DCmDrC,EAtCsB,WACpB,IAAMA,GAAWC,EAAAA,EAAAA,MACXC,GAAYC,EAAAA,EAAAA,IAAYC,EAAAA,IACxBC,GAAWF,EAAAA,EAAAA,IAAYG,EAAAA,IAC7BC,GAA+CJ,EAAAA,EAAAA,IAAYG,EAAAA,IAAnDE,EAAOD,EAAPC,QAASC,EAAUF,EAAVE,WAAYC,EAAIH,EAAJG,KAAMC,EAAOJ,EAAPI,SAEnCC,EAAAA,EAAAA,YAAU,WACRZ,GAASa,EAAAA,EAAAA,IAAY,CAAEH,KAAML,EAASK,KAAMC,QAASN,EAASM,UAEhE,GAAG,IAMH,OACEG,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,SACGd,GACCY,EAAAA,EAAAA,KAACG,EAAAA,EAAM,KAEPC,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAA0BJ,SAAA,EACxCF,EAAAA,EAAAA,KAACO,EAAAA,EAAS,IACTb,EAAQc,OAAS,IAAKR,EAAAA,EAAAA,KAACS,EAAAA,EAAU,CAACC,UAAWhB,IAE7CC,EAAa,IACZK,EAAAA,EAAAA,KAACW,EAAAA,EAAe,CACdf,KAAMA,EACND,WAAYA,EACZE,QAASA,EACTe,aAlBa,SAACC,GACxB3B,GAASa,EAAAA,EAAAA,IAAY,CAAEH,KAAMiB,EAAShB,QAASE,EAAAA,GAAYF,UAC7D,QAuBF,C","sources":["webpack://vocab-builder/./src/pages/recommendPage/RecommendPage.module.scss?490d","pages/recommendPage/RecommendPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"recommendContainer\":\"RecommendPage_recommendContainer__-MEAL\"};","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { Dashboard } from \"../../components/dashboard/Dashboard\";\r\nimport { WordsTable } from \"../../components/wordsTable/WordsTable\";\r\nimport styles from \"./RecommendPage.module.scss\";\r\nimport {\r\n  isLoadingWords,\r\n  selectAllWords,\r\n} from \"../../redux/words/wordsSelector\";\r\nimport { getAllWords } from \"../../redux/words/wordsOperation\";\r\nimport { WordsPagination } from \"../../components/wordsPagination/WordsPagination\";\r\n\r\nimport { Loader } from \"../../components/loader/Loader\";\r\nimport { useEffect } from \"react\";\r\n\r\nconst RecommendPage = () => {\r\n  const dispatch = useDispatch();\r\n  const isLoading = useSelector(isLoadingWords);\r\n  const allWords = useSelector(selectAllWords);\r\n  const { results, totalPages, page, perPage } = useSelector(selectAllWords);\r\n\r\n  useEffect(() => {\r\n    dispatch(getAllWords({ page: allWords.page, perPage: allWords.perPage }));\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  const handlePageChange = (newPage) => {\r\n    dispatch(getAllWords({ page: newPage, perPage: getAllWords.perPage }));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {isLoading ? (\r\n        <Loader />\r\n      ) : (\r\n        <div className={styles.recommendContainer}>\r\n          <Dashboard />\r\n          {results.length > 0 && <WordsTable allWordss={results} />}\r\n\r\n          {totalPages > 1 && (\r\n            <WordsPagination\r\n              page={page}\r\n              totalPages={totalPages}\r\n              perPage={perPage}\r\n              onPageChange={handlePageChange}\r\n            />\r\n          )}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RecommendPage;\r\n"],"names":["dispatch","useDispatch","isLoading","useSelector","isLoadingWords","allWords","selectAllWords","_useSelector","results","totalPages","page","perPage","useEffect","getAllWords","_jsx","_Fragment","children","Loader","_jsxs","className","styles","Dashboard","length","WordsTable","allWordss","WordsPagination","onPageChange","newPage"],"sourceRoot":""}