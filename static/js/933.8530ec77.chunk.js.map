{"version":3,"file":"static/js/933.8530ec77.chunk.js","mappings":"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","sources":["webpack://vocab-builder/./src/pages/dictionaryPage/DictionaryPage.module.scss?9074","pages/dictionaryPage/DictionaryPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dictionaryContainer\":\"DictionaryPage_dictionaryContainer__z-LC4\",\"dictionaryСontentWrp\":\"DictionaryPage_dictionaryСontentWrp__Io6F8\",\"dictionaryСontentBox\":\"DictionaryPage_dictionaryСontentBox__jo0hx\",\"dictionaryPageImg\":\"DictionaryPage_dictionaryPageImg__TTpFs\",\"buttonWrp\":\"DictionaryPage_buttonWrp__skJyH\",\"addButton\":\"DictionaryPage_addButton__AQ47w\",\"cancelButton\":\"DictionaryPage_cancelButton__ew66x\"};","import styles from \"./DictionaryPage.module.scss\";\r\nimport report from \"../../assets/img/blood-report.png\";\r\nimport { Dashboard } from \"../../components/dashboard/Dashboard\";\r\nimport { WordsTable } from \"../../components/wordsTable/WordsTable\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useCallback } from \"react\";\r\nimport {\r\n  isLoadingWords,\r\n  selectIsModalAddWordOpen,\r\n  selectUserWords,\r\n} from \"../../redux/words/wordsSelector\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { AddWordModal } from \"../../components/addWord/AddWordModal\";\r\nimport { Loader } from \"../../components/loader/Loader\";\r\nimport { WordsPagination } from \"../../components/wordsPagination/WordsPagination\";\r\nimport { getStatistics, getUserWords } from \"../../redux/words/wordsOperation\";\r\nimport { LogOutModal } from \"../../components/logOutModal/LogOutModal\";\r\nimport { selectIsModalOpen } from \"../../redux/auth/authSelector\";\r\nimport { openModalLogOut } from \"../../redux/auth/authSlicе\";\r\nimport { openModalAddWord } from \"../../redux/words/wordsSlicе\";\r\n\r\nconst DictionaryPage = () => {\r\n  const dispatch = useDispatch();\r\n  const isModalAddWordOpen = useSelector(selectIsModalAddWordOpen);\r\n\r\n  const [debounceTimer, setDebounceTimer] = useState(null);\r\n  const [searchQuery, setSearchQuery] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    dispatch(getStatistics());\r\n  }, [dispatch]);\r\n\r\n  const debouncedSearch = useCallback(\r\n    (query) => {\r\n      clearTimeout(debounceTimer);\r\n\r\n      const timerId = setTimeout(() => {\r\n        dispatch(getUserWords({ searchQuery: query.trim() }));\r\n      }, 300);\r\n\r\n      setDebounceTimer(timerId);\r\n    },\r\n    [debounceTimer, dispatch]\r\n  );\r\n\r\n  const handleSearchChange = (e) => {\r\n    const query = e.target.value;\r\n    setSearchQuery(query);\r\n    debouncedSearch(query);\r\n  };\r\n  return (\r\n    <>\r\n      <div className={styles.dictionaryContainer}>\r\n        <Dashboard\r\n          handleSearchChange={handleSearchChange}\r\n          searchQuery={searchQuery}\r\n        />\r\n        <WordsTableAndPagination searchQuery={searchQuery} />\r\n      </div>\r\n\r\n      {isModalAddWordOpen && <AddWordModal />}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DictionaryPage;\r\n\r\nconst WordsTableAndPagination = ({ searchQuery }) => {\r\n  const dispatch = useDispatch();\r\n  const isLoading = useSelector(isLoadingWords);\r\n  const { results, totalPages, page, perPage } = useSelector(selectUserWords);\r\n  const userWords = useSelector(selectUserWords);\r\n  const isModalOpen = useSelector(selectIsModalOpen);\r\n  const isModalAddWordOpen = useSelector(selectIsModalAddWordOpen);\r\n  useEffect(() => {\r\n    dispatch(\r\n      getUserWords({\r\n        searchQuery,\r\n        page: userWords.page,\r\n        perPage: userWords.perPage,\r\n      })\r\n    );\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  const handlePageChange = (newPage) => {\r\n    dispatch(\r\n      getUserWords({\r\n        searchQuery,\r\n        page: newPage,\r\n        perPage: getUserWords.perPage,\r\n      })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {isLoading ? (\r\n        <Loader />\r\n      ) : (\r\n        <>\r\n          {results.length > 0 ? (\r\n            <div>\r\n              <WordsTable ownWords={results} />\r\n            </div>\r\n          ) : searchQuery ? (\r\n            <p>{searchQuery} not found</p>\r\n          ) : (\r\n            <div className={styles.dictionaryСontentWrp}>\r\n              <div className={styles.dictionaryСontentBox}>\r\n                <h2>You don't have a single word in your dictionary.</h2>\r\n                <p>\r\n                  Please create or add a word to start the workout. We want to\r\n                  improve your vocabulary and develop your knowledge, so please\r\n                  share the words you are interested in adding to your study.\r\n                </p>\r\n                <div className={styles.buttonWrp}>\r\n                  <button\r\n                    onClick={() => dispatch(openModalAddWord())}\r\n                    type=\"button\"\r\n                    className={styles.addButton}\r\n                  >\r\n                    Add word\r\n                  </button>\r\n                  <button\r\n                    type=\"button\"\r\n                    className={styles.cancelButton}\r\n                    onClick={() => dispatch(openModalLogOut())}\r\n                  >\r\n                    Cancel\r\n                  </button>\r\n                </div>\r\n              </div>\r\n              <img\r\n                className={styles.dictionaryPageImg}\r\n                src={report}\r\n                alt={report}\r\n              />\r\n            </div>\r\n          )}\r\n          {isModalOpen && <LogOutModal />}\r\n          {isModalAddWordOpen && <AddWordModal />}\r\n        </>\r\n      )}\r\n      {totalPages > 1 && (\r\n        <WordsPagination\r\n          page={page}\r\n          totalPages={totalPages}\r\n          perPage={perPage}\r\n          onPageChange={handlePageChange}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n"],"names":["dispatch","useDispatch","isModalAddWordOpen","useSelector","selectIsModalAddWordOpen","_useState","useState","_useState2","_slicedToArray","debounceTimer","setDebounceTimer","_useState3","_useState4","searchQuery","setSearchQuery","useEffect","getStatistics","debouncedSearch","useCallback","query","clearTimeout","timerId","setTimeout","getUserWords","trim","_jsxs","_Fragment","children","className","styles","_jsx","Dashboard","handleSearchChange","e","target","value","WordsTableAndPagination","AddWordModal","_ref","isLoading","isLoadingWords","_useSelector","selectUserWords","results","totalPages","page","perPage","userWords","isModalOpen","selectIsModalOpen","Loader","length","WordsTable","ownWords","onClick","openModalAddWord","type","openModalLogOut","src","report","alt","LogOutModal","WordsPagination","onPageChange","newPage"],"sourceRoot":""}