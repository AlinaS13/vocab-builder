{"version":3,"file":"static/js/539.ff4e3c89.chunk.js","mappings":"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","sources":["assets/svg/ErrorSvg.jsx","assets/svg/SuccessSvg.jsx","webpack://vocab-builder/./src/pages/loginPage/LoginPage.module.scss?b2bf","webpack://vocab-builder/./src/components/loginForm/LoginForm.module.scss?e584","components/loginForm/LoginForm.jsx","pages/loginPage/LoginPage.jsx"],"sourcesContent":["import * as React from \"react\";\r\nconst ErrorSVG = (props) => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width=\"16\"\r\n    height=\"16\"\r\n    viewBox=\"0 0 16 16\"\r\n    fill=\"none\"\r\n  >\r\n    <g clipPath=\"url(#clip0_401_1222)\">\r\n      <path\r\n        d=\"M7.99992 14.6667C4.31792 14.6667 1.33325 11.682 1.33325 8C1.33325 4.318 4.31792 1.33333 7.99992 1.33333C11.6819 1.33333 14.6666 4.318 14.6666 8C14.6666 11.682 11.6819 14.6667 7.99992 14.6667ZM7.33325 10V11.3333H8.66659V10H7.33325ZM7.33325 4.66667V8.66667H8.66659V4.66667H7.33325Z\"\r\n        fill=\"#D80027\"\r\n      />\r\n    </g>\r\n    <defs>\r\n      <clipPath id=\"clip0_401_1222\">\r\n        <rect width=\"16\" height=\"16\" fill=\"white\" />\r\n      </clipPath>\r\n    </defs>\r\n  </svg>\r\n);\r\nexport default ErrorSVG;\r\n","import * as React from \"react\";\r\nconst SuccessSVG = (props) => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width=\"16\"\r\n    height=\"16\"\r\n    viewBox=\"0 0 16 16\"\r\n    fill=\"none\"\r\n  >\r\n    <g clipPath=\"url(#clip0_401_1213)\">\r\n      <path\r\n        d=\"M7.99992 14.6667C4.31792 14.6667 1.33325 11.682 1.33325 8C1.33325 4.318 4.31792 1.33333 7.99992 1.33333C11.6819 1.33333 14.6666 4.318 14.6666 8C14.6666 11.682 11.6819 14.6667 7.99992 14.6667ZM7.22925 10.99L11.9426 6.276L10.9999 5.33333L7.22925 9.10467L5.34325 7.21867L4.40058 8.16133L7.22925 10.99Z\"\r\n        fill=\"#3CBF61\"\r\n      />\r\n    </g>\r\n    <defs>\r\n      <clipPath id=\"clip0_401_1213\">\r\n        <rect width=\"16\" height=\"16\" fill=\"white\" />\r\n      </clipPath>\r\n    </defs>\r\n  </svg>\r\n);\r\nexport default SuccessSVG;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"loginPageContainer\":\"LoginPage_loginPageContainer__+IWAt\",\"contentWrp\":\"LoginPage_contentWrp__qT6D0\",\"mainImg\":\"LoginPage_mainImg__lH-fx\",\"contentText\":\"LoginPage_contentText__6DqS0\"};","// extracted by mini-css-extract-plugin\nexport default {\"loginFormWrp\":\"LoginForm_loginFormWrp__2GGYH\",\"loginFormTitle\":\"LoginForm_loginFormTitle__7VznC\",\"loginFormText\":\"LoginForm_loginFormText__u3Cpe\",\"loginForm\":\"LoginForm_loginForm__HuW7m\",\"loginField\":\"LoginForm_loginField__C+kw2\",\"loginLabel\":\"LoginForm_loginLabel__n2isa\",\"eyeBox\":\"LoginForm_eyeBox__G48PD\",\"loginButton\":\"LoginForm_loginButton__MPmbd\",\"messageWrp\":\"LoginForm_messageWrp__RBkD9\",\"errorMessage\":\"LoginForm_errorMessage__WSVXt\",\"successMessage\":\"LoginForm_successMessage__FHYp4\",\"navLink\":\"LoginForm_navLink__LZzDF\"};","import { Formik, Form, Field } from \"formik\";\r\nimport styles from \"./LoginForm.module.scss\";\r\nimport { BsEye, BsEyeSlash } from \"react-icons/bs\";\r\nimport * as yup from \"yup\";\r\nimport { useState } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport ErrorSVG from \"../../assets/svg/ErrorSvg\";\r\nimport SuccessSVG from \"../../assets/svg/SuccessSvg\";\r\nimport { loginUser } from \"../../redux/auth/authOperation\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nconst SignupSchema = yup.object().shape({\r\n  email: yup\r\n    .string()\r\n    .email(\"Invalid email\")\r\n    .typeError(\"Must be string\")\r\n    .trim()\r\n    .required(\"Please enter your email\")\r\n    .min(7, \"Your email is too short\")\r\n    .max(35, \"Email cannot be longer than 35 characters\")\r\n    .matches(/^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$/, \"Invalid email format\"),\r\n  password: yup\r\n    .string()\r\n    .typeError(\"Must be string\")\r\n    .trim()\r\n    .required(\"Please enter your password\")\r\n    .min(6, \"Your password is too short\")\r\n    .max(7, \"Password cannot be longer than 7 characters\")\r\n    .test(\r\n      \"password\",\r\n      \"The password must consist of 6 English letters and 1 number\",\r\n      (value) => /^(?=.*[a-zA-Z]{6})(?=.*\\d)[a-zA-Z\\d]{7}$/.test(value || \"\")\r\n    ),\r\n});\r\n\r\nexport const LoginForm = () => {\r\n  const [passwordType, setPasswordType] = useState(\"password\");\r\n  const dispatch = useDispatch();\r\n\r\n  const handleLogin = (userData) => {\r\n    dispatch(loginUser(userData));\r\n  };\r\n\r\n  const togglePassword = () => {\r\n    if (passwordType === \"password\") {\r\n      setPasswordType(\"text\");\r\n      return;\r\n    }\r\n    setPasswordType(\"password\");\r\n  };\r\n  return (\r\n    <Formik\r\n      validationSchema={SignupSchema}\r\n      initialValues={{\r\n        email: \"\",\r\n        password: \"\",\r\n      }}\r\n      validateOnBlur\r\n      onSubmit={(userData) => {\r\n        handleLogin(userData);\r\n      }}\r\n    >\r\n      {({\r\n        values,\r\n        errors,\r\n        touched,\r\n        handleChange,\r\n        handleBlur,\r\n        isValid,\r\n        handleSubmit,\r\n        dirty,\r\n      }) => {\r\n        return (\r\n          <div className={styles.loginFormWrp}>\r\n            <h2 className={styles.loginFormTitle}>Login</h2>\r\n            <p className={styles.loginFormText}>\r\n              Please enter your login details to continue using our service:\r\n            </p>\r\n            <Form className={styles.loginForm}>\r\n              <label className={styles.loginLabel}>\r\n                <Field\r\n                  autoComplete=\"off\"\r\n                  name=\"email\"\r\n                  type=\"email\"\r\n                  placeholder=\"Email\"\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  value={values.email}\r\n                  className={styles.loginField}\r\n                />\r\n                {touched.email && errors.email && (\r\n                  <div className={styles.errorWrp}>\r\n                    <ErrorSVG />\r\n                    <p className={styles.errorMessage}>{errors.email}</p>\r\n                  </div>\r\n                )}\r\n                {touched.email && !errors.email && (\r\n                  <div className={styles.messageWrp}>\r\n                    <SuccessSVG />\r\n                    <p className={styles.successMessage}>Success email</p>\r\n                  </div>\r\n                )}\r\n              </label>\r\n\r\n              <label className={styles.loginLabel}>\r\n                <Field\r\n                  autoComplete=\"off\"\r\n                  name=\"password\"\r\n                  type={passwordType}\r\n                  placeholder=\"Password\"\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  value={values.password}\r\n                  className={styles.loginField}\r\n                />\r\n                <div className={styles.eyeBox} onClick={togglePassword}>\r\n                  {passwordType === \"password\" ? (\r\n                    <BsEyeSlash fill=\"#121417\" />\r\n                  ) : (\r\n                    <BsEye fill=\"#121417\" />\r\n                  )}\r\n                </div>\r\n                {touched.password && errors.password && (\r\n                  <div className={styles.errorWrp}>\r\n                    <ErrorSVG />\r\n                    <p className={styles.errorMessage}>{errors.password}</p>\r\n                  </div>\r\n                )}\r\n                {touched.password && !errors.password && (\r\n                  <div className={styles.messageWrp}>\r\n                    <SuccessSVG />\r\n                    <p className={styles.successMessage}>Success password</p>\r\n                  </div>\r\n                )}\r\n              </label>\r\n              <button\r\n                type=\"submit\"\r\n                disabled={!isValid && !dirty}\r\n                onClick={handleSubmit}\r\n                className={styles.loginButton}\r\n              >\r\n                Login\r\n              </button>\r\n              <NavLink className={styles.navLink} to=\"/register\">\r\n                Register\r\n              </NavLink>\r\n            </Form>\r\n          </div>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\n","import styles from \"./LoginPage.module.scss\";\r\n\r\nimport illustration from \"../../assets/img/illustration.png\";\r\nimport { LoginForm } from \"../../components/loginForm/LoginForm\";\r\n\r\nconst LoginPage = () => {\r\n  return (\r\n    <div className={styles.loginPageContainer}>\r\n      <LoginForm />\r\n      <div className={styles.contentWrp}>\r\n        <img src={illustration} className={styles.mainImg} alt={illustration} />\r\n        <p className={styles.contentText}>\r\n          Word · Translation · Grammar · Progress\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n"],"names":["props","_jsxs","xmlns","width","height","viewBox","fill","children","_jsx","clipPath","d","id","SignupSchema","yup","shape","email","typeError","trim","required","min","max","matches","password","test","value","LoginForm","_useState","useState","_useState2","_slicedToArray","passwordType","setPasswordType","dispatch","useDispatch","togglePassword","Formik","validationSchema","initialValues","validateOnBlur","onSubmit","userData","loginUser","handleLogin","_ref","values","errors","touched","handleChange","handleBlur","isValid","handleSubmit","dirty","className","styles","loginFormWrp","loginFormTitle","loginFormText","Form","loginForm","loginLabel","Field","autoComplete","name","type","placeholder","onChange","onBlur","loginField","errorWrp","ErrorSVG","errorMessage","messageWrp","SuccessSVG","successMessage","eyeBox","onClick","BsEyeSlash","BsEye","disabled","loginButton","NavLink","navLink","to","src","illustration","alt"],"sourceRoot":""}