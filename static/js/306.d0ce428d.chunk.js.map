{"version":3,"file":"static/js/306.d0ce428d.chunk.js","mappings":"2MACA,EAAqC,0C,0DCyDrC,EA1CsB,WACpB,IAAMA,GAAWC,EAAAA,EAAAA,MAEjBC,GAA0CC,EAAAA,EAAAA,UAAS,MAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAjDI,EAAaF,EAAA,GAAEG,EAAgBH,EAAA,GACtCI,GAAsCL,EAAAA,EAAAA,UAAS,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA3CE,EAAWD,EAAA,GAAEE,EAAcF,EAAA,IAElCG,EAAAA,EAAAA,YAAU,WACRZ,GAASa,EAAAA,EAAAA,MACX,GAAG,CAACb,IAEJ,IAAMc,GAAkBC,EAAAA,EAAAA,cACtB,SAACC,GACCC,aAAaX,GAEb,IAAMY,EAAUC,YAAW,WACzBnB,GAASoB,EAAAA,EAAAA,IAAY,CAAEV,YAAaM,EAAMK,SAC5C,GAAG,KAEHd,EAAiBW,EACnB,GACA,CAACZ,EAAeN,IASlB,OACEsB,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAA0BH,SAAA,EACxCF,EAAAA,EAAAA,KAACM,EAAAA,EAAS,CACRC,mBAVmB,SAACC,GAC1B,IAAMd,EAAQc,EAAEC,OAAOC,MACvBrB,EAAeK,GACfF,EAAgBE,EAClB,EAOQN,YAAaA,KAEfY,EAAAA,EAAAA,KAACW,EAAuB,CAACvB,YAAaA,QAI9C,EAIMuB,EAA0B,SAAHC,GAAyB,IAAnBxB,EAAWwB,EAAXxB,YAC3BV,GAAWC,EAAAA,EAAAA,MACXkC,GAAYC,EAAAA,EAAAA,IAAYC,EAAAA,IAC9BC,GAA+CF,EAAAA,EAAAA,IAAYG,EAAAA,IAAnDC,EAAOF,EAAPE,QAASC,EAAUH,EAAVG,WAAYC,EAAIJ,EAAJI,KAAMC,EAAOL,EAAPK,QAC7BC,GAAWR,EAAAA,EAAAA,IAAYG,EAAAA,KAE7B3B,EAAAA,EAAAA,YAAU,WACRZ,GACEoB,EAAAA,EAAAA,IAAY,CACVV,YAAAA,EACAgC,KAAME,EAASF,KACfC,QAASC,EAASD,UAIxB,GAAG,IAYH,OACErB,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,SACGW,GACCb,EAAAA,EAAAA,KAACuB,EAAAA,EAAM,KAEPpB,EAAAA,EAAAA,MAAA,OAAAD,SAAA,CACGgB,EAAQM,OAAS,GAChBxB,EAAAA,EAAAA,KAACyB,EAAAA,EAAU,CAACH,SAAUJ,IAEtB9B,IAAee,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CAAId,EAAY,gBAEhC+B,EAAa,IACZnB,EAAAA,EAAAA,KAAC0B,EAAAA,EAAe,CACdN,KAAMA,EACND,WAAYA,EACZE,QAASA,EACTM,aA1Ba,SAACC,GACxBlD,GACEoB,EAAAA,EAAAA,IAAY,CACVV,YAAAA,EACAgC,KAAMQ,EACNP,QAASvB,EAAAA,GAAYuB,UAG3B,QAyBF,C","sources":["webpack://vocab-builder/./src/pages/recommendPage/RecommendPage.module.scss?490d","pages/recommendPage/RecommendPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"recommendContainer\":\"RecommendPage_recommendContainer__-MEAL\"};","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { Dashboard } from \"../../components/dashboard/Dashboard\";\r\nimport { WordsTable } from \"../../components/wordsTable/WordsTable\";\r\nimport styles from \"./RecommendPage.module.scss\";\r\nimport {\r\n  isLoadingWords,\r\n  selectAllWords,\r\n} from \"../../redux/words/wordsSelector\";\r\nimport { getAllWords, getStatistics } from \"../../redux/words/wordsOperation\";\r\nimport { WordsPagination } from \"../../components/wordsPagination/WordsPagination\";\r\n\r\nimport { Loader } from \"../../components/loader/Loader\";\r\nimport { useEffect } from \"react\";\r\nimport { useCallback } from \"react\";\r\nimport { useState } from \"react\";\r\n\r\nconst RecommendPage = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const [debounceTimer, setDebounceTimer] = useState(null);\r\n  const [searchQuery, setSearchQuery] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    dispatch(getStatistics());\r\n  }, [dispatch]);\r\n\r\n  const debouncedSearch = useCallback(\r\n    (query) => {\r\n      clearTimeout(debounceTimer);\r\n\r\n      const timerId = setTimeout(() => {\r\n        dispatch(getAllWords({ searchQuery: query.trim() }));\r\n      }, 300);\r\n\r\n      setDebounceTimer(timerId);\r\n    },\r\n    [debounceTimer, dispatch]\r\n  );\r\n\r\n  const handleSearchChange = (e) => {\r\n    const query = e.target.value;\r\n    setSearchQuery(query);\r\n    debouncedSearch(query);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className={styles.recommendContainer}>\r\n        <Dashboard\r\n          handleSearchChange={handleSearchChange}\r\n          searchQuery={searchQuery}\r\n        />\r\n        <WordsTableAndPagination searchQuery={searchQuery} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RecommendPage;\r\n\r\nconst WordsTableAndPagination = ({ searchQuery }) => {\r\n  const dispatch = useDispatch();\r\n  const isLoading = useSelector(isLoadingWords);\r\n  const { results, totalPages, page, perPage } = useSelector(selectAllWords);\r\n  const allWords = useSelector(selectAllWords);\r\n\r\n  useEffect(() => {\r\n    dispatch(\r\n      getAllWords({\r\n        searchQuery,\r\n        page: allWords.page,\r\n        perPage: allWords.perPage,\r\n      })\r\n    );\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  const handlePageChange = (newPage) => {\r\n    dispatch(\r\n      getAllWords({\r\n        searchQuery,\r\n        page: newPage,\r\n        perPage: getAllWords.perPage,\r\n      })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {isLoading ? (\r\n        <Loader />\r\n      ) : (\r\n        <div>\r\n          {results.length > 0 ? (\r\n            <WordsTable allWords={results} />\r\n          ) : (\r\n            searchQuery && <p>{searchQuery} not found</p>\r\n          )}\r\n          {totalPages > 1 && (\r\n            <WordsPagination\r\n              page={page}\r\n              totalPages={totalPages}\r\n              perPage={perPage}\r\n              onPageChange={handlePageChange}\r\n            />\r\n          )}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n"],"names":["dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","debounceTimer","setDebounceTimer","_useState3","_useState4","searchQuery","setSearchQuery","useEffect","getStatistics","debouncedSearch","useCallback","query","clearTimeout","timerId","setTimeout","getAllWords","trim","_jsx","_Fragment","children","_jsxs","className","styles","Dashboard","handleSearchChange","e","target","value","WordsTableAndPagination","_ref","isLoading","useSelector","isLoadingWords","_useSelector","selectAllWords","results","totalPages","page","perPage","allWords","Loader","length","WordsTable","WordsPagination","onPageChange","newPage"],"sourceRoot":""}